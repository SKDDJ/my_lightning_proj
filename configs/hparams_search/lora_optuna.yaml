# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/acc_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    # storage: sqlite:////root/shiym_proj/DiffLook/optunaniubi.db
    storage: null

    # name of the study to persist optimization results
    study_name: testdifflook

    # number of parallel workers
    n_jobs: 8

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # n_trials is the number of trials each process will run, not the total number of trials across all processes.
    n_trials: 200

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 42
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.00001, 0.1) # default interval 1e-5
      data.batch_size: choice(8,32)
      # model.net.input_noise_factor: choice(0.001, 0.01, 0.1)
      # model.net.latent_noise_factor: choice(0.01, 0.1, 0.2)
      # model.net.fold_rate: choice(5, 7) ## default 5
      # model.net.kernel_size: choice(5, 7)
      # model.net.layers: choice(range(4, 9))  # 编码器和解码器的共同层数
      # model.net.enc_channel_list: choice([4, 4, 4, 4], [16, 8, 8, 4])
      # model.net.dec_channel_list: choice([4, 256, 256, 8], [4, 512, 512, 8], [16, 256, 256, 8])

      # model.net.dropout_rate: uniform(0, 0.5)
      # model.net.activation_func: choice(['relu', 'elu', 'tanh', 'sigmoid'])
      # x: range(-5.5, 5.5, 0.5)
